import { useState, useEffect } from 'react'
import { useAuth } from '../hooks/useAuth'
import { apiFetch } from '../lib/api'
import { useNavigate } from 'react-router-dom'

export default function LinkGenerator() {
  const { user, token } = useAuth()
  const navigate = useNavigate()
  const [loading, setLoading] = useState(false)
  const [success, setSuccess] = useState('')
  const [error, setError] = useState('')
  const [productUrl, setProductUrl] = useState('')
  const [generatedLink, setGeneratedLink] = useState(null)
  const [urlValidation, setUrlValidation] = useState({ isValid: true, message: '' })
  const [dashboardData, setDashboardData] = useState({
    totalLinks: 0,
    totalEarnings: 0,
    conversionRate: 0,
    todayClicks: 0,
    todayEarnings: 0,
    recentLinks: []
  })
  const [dataLoading, setDataLoading] = useState(true)

  // Load dashboard data on component mount
  useEffect(() => {
    if (token) {
      loadDashboardData()
    }
  }, [token])

  const loadDashboardData = async () => {
    try {
      setDataLoading(true)
      const [analyticsRes, earningsRes, linksRes] = await Promise.all([
        apiFetch('/api/creator/analytics', { token }),
        apiFetch('/api/creator/earnings', { token }),
        apiFetch('/api/creator/links', { token })
      ])
      
      setDashboardData({
        totalLinks: linksRes.links?.length || 0,
        totalEarnings: earningsRes.total || 0,
        conversionRate: analyticsRes.clicks > 0 ? ((analyticsRes.conversions || 0) / analyticsRes.clicks * 100) : 0,
        todayClicks: analyticsRes.todayClicks || 0,
        todayEarnings: earningsRes.today || 0,
        recentLinks: linksRes.links?.slice(0, 3) || []
      })
    } catch (err) {
      console.error('Failed to load dashboard data:', err)
    } finally {
      setDataLoading(false)
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!productUrl.trim()) return
    
    setLoading(true)
    setError('')
    setGeneratedLink(null)
    
    try {
      const result = await apiFetch('/api/creator/links', {
        method: 'POST',
        body: { destinationUrl: productUrl },
        token
      })
      
      // Extract the link data from the response
      setGeneratedLink(result.link)
      setSuccess('Link generated successfully!')
      setProductUrl('')
      
      // Refresh dashboard data to show new link
      await loadDashboardData()
      
      setTimeout(() => setSuccess(''), 5000)
    } catch (err) {
      setError(err.message || 'Failed to generate link')
      setTimeout(() => setError(''), 5000)
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = (text, linkType) => {
    navigator.clipboard.writeText(text)
    setSuccess(`${linkType} copied to clipboard!`)
    setTimeout(() => setSuccess(''), 3000)
  }

  // Helper function to truncate long URLs for display
  const truncateUrl = (url, maxLength = 50) => {
    if (!url || url.length <= maxLength) return url
    const start = url.substring(0, 25)
    const end = url.substring(url.length - 20)
    return `${start}...${end}`
  }

  // URL validation helper
  const validateUrl = (url) => {
    if (!url.trim()) {
      return { isValid: true, message: '' }
    }
    
    try {
      const urlObj = new URL(url)
      
      // Check if it's HTTP/HTTPS
      if (!['http:', 'https:'].includes(urlObj.protocol)) {
        return { isValid: false, message: 'URL must start with http:// or https://' }
      }
      
      // Check for common shopping sites
      const supportedDomains = ['walmart.com', 'target.com', 'amazon.com', 'bestbuy.com', 'homedepot.com']
      const domain = urlObj.hostname.replace('www.', '')
      const isSupported = supportedDomains.some(d => domain.includes(d))
      
      if (isSupported) {
        return { isValid: true, message: '✅ Supported retailer detected' }
      } else {
        return { isValid: true, message: '⚠️ This site may have limited tracking support' }
      }
    } catch {
      return { isValid: false, message: 'Please enter a valid URL (e.g., https://walmart.com/product)' }
    }
  }

  // Handle URL input change with validation
  const handleUrlChange = (e) => {
    const url = e.target.value
    setProductUrl(url)
    const validation = validateUrl(url)
    setUrlValidation(validation)
  }

  const handleQuickAction = (action) => {
    switch (action) {
      case 'analytics':
        navigate('/analytics')
        break
      case 'manage-links':
        navigate('/my-links')
        break
      case 'referrals':
        navigate('/referrals')
        break
      default:
        break
    }
  }

  if (dataLoading) {
    return (
      <div className="creator-dashboard">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading your dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="creator-dashboard">
      {/* Hero Section */}
      <div className="hero-section">
        <div className="hero-content">
          <h1 className="hero-title">
            🎉 NEW UI! Welcome back, <span className="gradient-text">{user?.name || 'Creator'}!</span> ✨
          </h1>
          <p className="hero-subtitle">
            Transform your audience into revenue with powerful affiliate links
          </p>
          <div className="hero-stats">
            <div className="stat-card">
              <div className="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>
              </div>
              <div className="stat-content">
                <span className="stat-value">{dashboardData.totalLinks}</span>
                <span className="stat-label">Active Links</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.122 2.122" />
                </svg>
              </div>
              <div className="stat-content">
                <span className="stat-value">${dashboardData.totalEarnings.toFixed(2)}</span>
                <span className="stat-label">Total Earnings</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <div className="stat-content">
                <span className="stat-value">{dashboardData.conversionRate.toFixed(1)}%</span>
                <span className="stat-label">Conversion Rate</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="dashboard-content">
        <div className="content-grid">
          {/* Link Generation Form */}
          <div className="form-section">
            <div className="section-header">
              <h2 className="section-title">Generate New Link</h2>
              <p className="section-subtitle">Create high-converting affiliate links in seconds</p>
            </div>
            
            <form onSubmit={handleSubmit} className="link-form">
              <div className="simple-form">
                <div className="form-group">
                  <label className="form-label">Product URL *</label>
                  <div className="url-input-group">
                    <input
                      type="url"
                      value={productUrl}
                      onChange={handleUrlChange}
                      className={`form-input large ${!urlValidation.isValid ? 'error' : ''}`}
                      placeholder="https://walmart.com/product/example"
                      required
                    />
                    <button
                      type="submit"
                      disabled={loading || !productUrl.trim()}
                      className="btn-primary"
                    >
                      {loading ? (
                        <>
                          <svg className="animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                          Generating...
                        </>
                      ) : (
                        <>
                          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                          </svg>
                          Generate Link
                        </>
                      )}
                    </button>
                  </div>
                  {urlValidation.message && (
                    <div className={`url-feedback ${urlValidation.isValid ? 'success' : 'error'}`}>
                      {urlValidation.message}
                    </div>
                  )}
                </div>
              </div>
            </form>

            {/* Generated Link Display */}
            {generatedLink && (
              <div className="generated-link-section">
                <h3 className="generated-title">Your Link is Ready! 🎉</h3>
                
                {/* Primary Link - Short Link */}
                <div className="primary-link-card">
                  <div className="link-header">
                    <div className="link-info">
                      <span className="link-label primary">✨ Share This Link</span>
                      <span className="link-description">Clean, branded link perfect for social media</span>
                    </div>
                    <button
                      onClick={() => copyToClipboard(generatedLink.shortLink, 'Short link')}
                      className="copy-btn primary"
                    >
                      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      Copy Link
                    </button>
                  </div>
                  <div className="link-url-display">
                    <span className="link-url primary">{generatedLink.shortLink}</span>
                  </div>
                </div>

                {/* QR Code Section - TEMPORARILY DISABLED */}
                {false && generatedLink.qrCodeUrl && (
                  <div className="qr-code-section">
                    <h4 className="qr-title">📱 QR Code</h4>
                    <div className="qr-container">
                      <img 
                        src={generatedLink.qrCodeUrl} 
                        alt="QR Code for your link" 
                        className="qr-code-image"
                      />
                      <p className="qr-description">Scan to share instantly</p>
                    </div>
                  </div>
                )}
                
                {/* Secondary Links - Collapsible */}
                <details className="advanced-links">
                  <summary className="advanced-toggle">
                    <span>🔧 Advanced Options</span>
                    <svg className="chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </summary>
                  
                  <div className="advanced-content">
                    <div className="link-card secondary">
                      <div className="link-header">
                        <div className="link-info">
                          <span className="link-label">🔗 Direct Tracking Link</span>
                          <span className="link-description">Raw affiliate link (for advanced users)</span>
                        </div>
                        <button
                          onClick={() => copyToClipboard(generatedLink.impactLink, 'Tracking link')}
                          className="copy-btn secondary"
                        >
                          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                          </svg>
                          Copy
                        </button>
                      </div>
                      <div className="link-url-display">
                        <span className="link-url truncated" title={generatedLink.impactLink}>
                          {truncateUrl(generatedLink.impactLink, 60)}
                        </span>
                      </div>
                    </div>
                  </div>
                </details>
                
                <div className="link-actions">
                  <button
                    onClick={() => setGeneratedLink(null)}
                    className="btn-secondary"
                  >
                    Generate Another Link
                  </button>
                </div>
              </div>
            )}

            {/* Recent Links Section */}
            {dashboardData.recentLinks.length > 0 && (
              <div className="recent-links-section">
                <h3 className="section-title">Recent Links</h3>
                <div className="recent-links-list">
                  {dashboardData.recentLinks.map((link, index) => (
                    <div key={link.id} className="recent-link-item">
                      <div className="link-info">
                        <div className="link-url" title={link.destinationUrl}>
                          {truncateUrl(link.destinationUrl, 60)}
                        </div>
                        <div className="link-stats">
                          <span>{link.clicks || 0} clicks</span>
                          <span>•</span>
                          <span>${Number(link.revenue || 0).toFixed(2)} earned</span>
                        </div>
                      </div>
                      <button
                        onClick={() => copyToClipboard(link.shortLink || link.impactLink, 'Link')}
                        className="copy-btn small"
                      >
                        Copy
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Quick Actions */}
          <div className="quick-actions">
            <div className="section-header">
              <h3 className="section-title">Quick Actions</h3>
            </div>
            
            <div className="action-cards">
              <div className="action-card">
                <div className="action-icon">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                </div>
                <h4>View Analytics</h4>
                <p>Track your link performance and earnings</p>
                <button 
                  onClick={() => handleQuickAction('analytics')}
                  className="btn-secondary"
                >
                  View Analytics
                </button>
              </div>
              
              <div className="action-card">
                <div className="action-icon">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                  </svg>
                </div>
                <h4>Manage Links</h4>
                <p>Edit, pause, or delete your existing links</p>
                <button 
                  onClick={() => handleQuickAction('manage-links')}
                  className="btn-secondary"
                >
                  Manage Links
                </button>
              </div>
              
              <div className="action-card">
                <div className="action-icon">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
                <h4>Referral Program</h4>
                <p>Invite friends and earn 10% for 6 months</p>
                <button 
                  onClick={() => handleQuickAction('referrals')}
                  className="btn-secondary"
                >
                  Invite Friends
                </button>
              </div>
            </div>

            {/* Today's Summary */}
            <div className="today-summary">
              <h4>Today's Summary</h4>
              <div className="summary-stats">
                <div className="summary-stat">
                  <span className="summary-label">Clicks</span>
                  <span className="summary-value">{dashboardData.todayClicks}</span>
                </div>
                <div className="summary-stat">
                  <span className="summary-label">Earnings</span>
                  <span className="summary-value">${dashboardData.todayEarnings.toFixed(2)}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Messages */}
      {success && (
        <div className="message success">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
          {success}
        </div>
      )}
      
      {error && (
        <div className="message error">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
          {error}
        </div>
      )}
    </div>
  )
}
