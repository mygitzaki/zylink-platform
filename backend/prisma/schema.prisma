// Prisma schema generated from ZYLINK_DOCUMENTATION_SIMPLE guide

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id               String            @id @default(uuid())
  impactSubId      String?           @unique
  name             String
  email            String            @unique
  password         String
  adminRole        AdminRole?
  bio              String?
  socialMediaLinks Json?
  groupLinks       Json?
  applicationStatus ApplicationStatus?
  isActive         Boolean           @default(false)
  commissionRate   Int               @default(70)
  salesBonus       Decimal           @default(0)
  referralCode     String?           @unique
  referredBy       String?
  walletAddress    String            @default("0x0000000000000000000000000000000000000000")
  applicationNotes String?
  rejectionReason  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  links            Link[]
  earnings         Earning[]
  earningsSnapshots EarningsSnapshot[] // NEW: Point-in-time earnings
  earningsReversals EarningsReversal[] // NEW: Commission reversal tracking
  referralsGiven   ReferralEarning[] @relation("Referrer")
  referralsReceived ReferralEarning[] @relation("Referred")
  paymentAccount   PaymentAccount?
  shortLinks       ShortLink[]
  payouts          PayoutRequest[]
  refreshTokens    RefreshToken[]

  @@index([email])
  @@index([applicationStatus])
  @@index([isActive])
  @@index([referralCode])
}

model Link {
  id             String   @id @default(uuid())
  creatorId      String
  destinationUrl String
  impactLink     String
  shortLink      String
  qrCodeUrl      String?
  clicks         Int      @default(0)
  conversions    Int      @default(0)
  revenue        Decimal  @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())

  creator        Creator  @relation(fields: [creatorId], references: [id])
  earnings       Earning[]
  earningsSnapshots EarningsSnapshot[] // NEW: Point-in-time earnings snapshots

  @@index([creatorId])
}

model Earning {
  id                  String        @id @default(uuid())
  creatorId           String
  linkId              String?
  amount              Decimal
  type                EarningType
  status              PaymentStatus @default(PENDING)
  impactTransactionId String?
  createdAt           DateTime      @default(now())
  
  // NEW: Forward-only commission rate fields (nullable for backwards compatibility)
  appliedCommissionRate Int?        // Commission rate used when this earning was created
  grossAmount          Decimal?     // Original Impact.com amount before commission calculation
  rateEffectiveDate    DateTime?    // When this commission rate was effective

  creator             Creator       @relation(fields: [creatorId], references: [id])
  link                Link?         @relation(fields: [linkId], references: [id])
  reversals           EarningsReversal[] // NEW: Track reversals of this earning

  @@index([type, status])
  @@index([createdAt])
}

// NEW: Point-in-Time Earnings Snapshot System
// ZERO RISK: This table doesn't affect existing functionality
model EarningsSnapshot {
  id                  String        @id @default(uuid())
  creatorId           String
  linkId              String?
  
  // Point-in-time data (locked forever)
  originalAmount      Decimal       // Amount calculated at time of earning
  commissionRate      Int           // Commission rate used at that specific time
  grossAmount         Decimal       // Original Impact.com amount
  
  // Metadata
  type                EarningType   // COMMISSION, SALES_BONUS, REFERRAL_BONUS
  source              String        // 'IMPACT_API', 'WEBHOOK', 'MANUAL'
  impactTransactionId String?       // Impact.com transaction ID
  
  // Timestamps
  earnedAt            DateTime      // When the earning actually occurred
  snapshotAt          DateTime      @default(now()) // When this snapshot was created
  rateEffectiveDate   DateTime      // When this commission rate was effective
  
  // Relations
  creator             Creator       @relation(fields: [creatorId], references: [id])
  link                Link?         @relation(fields: [linkId], references: [id])

  @@index([creatorId, earnedAt])
  @@index([earnedAt])
  @@index([source])
}

// NEW: Commission Reversal Tracking System
// Handles Impact.com commission reversals (returns, chargebacks, fraud, etc.)
model EarningsReversal {
  id                  String        @id @default(uuid())
  creatorId           String
  
  // Original earning reference (if available)
  originalEarningId   String?
  originalSnapshotId  String?       // Link to original snapshot
  
  // Reversal details
  reversalAmount      Decimal       // Amount being reversed (always positive)
  originalAmount      Decimal       // Original earning amount
  netAdjustment       Decimal       // Final adjustment (negative for reversal)
  
  // Reversal metadata
  reason              String        // 'RETURN', 'FRAUD', 'CHARGEBACK', 'CANCELLATION'
  impactTransactionId String?       // Impact.com reversal transaction ID
  originalImpactId    String?       // Original Impact.com transaction ID
  
  // Commission rate context
  originalCommissionRate Int        // Commission rate when original earning occurred
  reversalCommissionRate Int?       // Commission rate when reversal occurred (if different)
  
  // Timestamps
  originalEarnedAt    DateTime      // When original earning occurred
  reversedAt          DateTime      @default(now()) // When reversal was processed
  
  // Relations
  creator             Creator       @relation(fields: [creatorId], references: [id])
  originalEarning     Earning?      @relation(fields: [originalEarningId], references: [id])

  @@index([creatorId, reversedAt])
  @@index([originalImpactId])
  @@index([reason])
}

model ReferralEarning {
  id         String   @id @default(uuid())
  referrerId String
  referredId String
  amount     Decimal
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())

  referrer   Creator  @relation("Referrer", fields: [referrerId], references: [id])
  referred   Creator  @relation("Referred", fields: [referredId], references: [id])
}

model PaymentAccount {
  id             String            @id @default(uuid())
  creatorId      String            @unique
  accountType    PaymentAccountType
  accountDetails Json
  isVerified     Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  creator        Creator           @relation(fields: [creatorId], references: [id])
}

model ShortLink {
  id              String   @id @default(uuid())
  shortCode       String   @unique
  shortLink       String   // The full short URL (e.g., https://s.zylike.com/ABC123)
  originalUrl     String
  creatorId       String
  clicks          Int      @default(0)
  createdAt       DateTime @default(now())

  creator         Creator  @relation(fields: [creatorId], references: [id])
  clickLogs       ClickLog[]

  @@index([shortCode])
  @@index([creatorId])
}

model ClickLog {
  id          String   @id @default(uuid())
  shortLinkId String
  ipAddress   String?
  userAgent   String?
  referrer    String?
  clickedAt   DateTime @default(now())

  shortLink   ShortLink @relation(fields: [shortLinkId], references: [id])
}

model PayoutRequest {
  id          String        @id @default(uuid())
  creatorId   String
  amount      Decimal
  status      PayoutStatus  @default(PENDING)
  requestedAt DateTime      @default(now())
  processedAt DateTime?

  creator     Creator       @relation(fields: [creatorId], references: [id])

  @@index([status])
  @@index([creatorId])
}

model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @unique
  creatorId  String
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime  @default(now())

  creator    Creator   @relation(fields: [creatorId], references: [id])

  @@index([token])
  @@index([creatorId])
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum EarningType {
  COMMISSION
  SALES_BONUS
  REFERRAL_BONUS
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
}

enum PaymentAccountType {
  BANK_ACCOUNT
  PAYPAL
  CRYPTO_WALLET
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}
